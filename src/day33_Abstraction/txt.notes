`java
public abstract class Food extends Object { //can extend to other classes
    (abstract or non-abstract)


    //- Abstract Classes can use all access modifiers with variables and methods
    String name;
    public static int amount;
    protected int quantity;
    boolean isSpicy;
    private boolean isTasty;
    public final boolean EDIBLE = true;

    public Food(){//constructor
        //code
    }
    public abstract void eat(); //void eat(); - > it will not work
    //abstract classes and methods can not be private (not inherited) or final (never overridden)
    //Does not have implementation (without curly braces)
    //can only be declared in 'abstract classes' or 'interfaces'
    //Method overriding' rules apply to implement abstract methods
    //First concrete class (subclass of abstract class or interface) must
    //implement all inherited abstract methods

    public void serve(){  //instance method
        //code
    }

    public static void buy(){ //static method
        //code
    }

    public static void main(String[] args) { //can have main method
        //Food obj = new Food(); //but can not create obj
    }

    static { //static blok
        //code
    }
    {
        //instance blok
    }


}

=================================================


public class Patotoes extends Food implements Bakeable, Cookable{
    public Patotoes(String name) {
        super(name);
    }

    @Override
    public void cook() {

    }

    @Override
    public void store() {

    }

    @Override
    public void eat() {

    }
}
============================================
===========================================

public interface Cookable { //100% percent abstraction in Java is achieved using "interfaces"

    //- Interfaces can only use public access modifier
    public static final String ACTION = "Cook";

    boolean CAN_BE_COOKED = true;  // same as public static final boolean CAN_BE_COOKED
    public abstract void cook();

    void store();


   /* What can not an interface have?
    No constructor
    No static block
    No instance block
    No access modifier other than "public"
    An interface can "extends" multiple interfaces
    A class can "implements" multiple interfaces
    A class can "extends" only one class*/


}
======================================

public interface Bakeable {

    public default void bakeInOven(){//since Java 8 "public default"
        //code
    }

    public static void bake(String str){//"public static"
        //code
    }
==========================================
public abstract class Soep extends Food {

    /*When an abstract class extends another abstract class, it does not require to
    override/implement abstract methods from parent*/
}Abstraction Class Notes


 Abstraction: is concentrating on essential/important things and not worrying about details.

 			 is concentrating on name of the action/behaviour, without thinking about implementation


 Abstraction can be done in 2 ways: Abstract classes, Interface


 Abstraction helps with "organizing the code", "reusing the code", "less duplicate code",


 Can we instantiate abstract class?


 What is Abstract Method?
 	- is a method without body/implementation. Can be placed in abstract class or interface


 Where do you add implementation?
 	- Is added in first concrete class
 	- While adding implementation, all overriding rules should be followed.



 Can we add non-abstract method in abstract class?
 	- Yes we can. Abstract class can have both abstract method and non-abstract method


 Is it mendatory for abstract class to have abstract method?
 	- No it is not. Abstract class can have 0 abstract method.


 Can we add constructor in abstract class?
 	- Yes we can.

 If we can not instantiate abstract class, how we can call the constructor?
 	- The constructor of abstract class can be called from a subclass using super keyword.


 Can you add instance or static variables into abstract class?
 	- Yes we can have instance variables in abstract class

 	- Variables can not be abstract
 		abstract int id; //Error

 Can you add instance or static init block?
 	- Yes we can


 Can an abstract class extend another abstract class?
 	- Yes it can


 Can an abstract class extend another non-abstract class?
 	- Yes it can


 Can a class extends multiple abstract classes?
     - No it can not


 Can we add static method into abstract class?
 	- yes we can



 Can a method be abstract and final in abstract class?
 	- No it can not


 Can abstract method be protected, private, and default?
 	- private: no
 	- default: yes
 	- protected: yes


 	Can an abstract method be static?
 -> No, abstract methods are meant to overridden, and only the instance
 methods can be override


 Can a method be abstract and final?
 -> No, we cannot have abstract final methods. Final methods cannot be
 overridden, and abstract methods must be implemented



 When an abstract class extends another abstract class, does it require to override/implement abstract methods from parent?
 	- No it does not require
 	- First concrete sub class is required to implement all abstract methods

 ```